#!/bin/osmtKsh
#!/bin/osmtKsh 

typeset RcsId="$Id: lcaOpenVpnHosts.sh,v 1.1.1.1 2016-06-08 23:49:51 lsipusr Exp $"

if [ "${loadFiles}X" == "X" ] ; then
     seedSubjectHosts.sh -l $0 "$@"
     exit $?
fi

. ${opBinBase}/mmaLib.sh
. ${opBinBase}/mmaDnsLib.sh
# ./mmaLayer3Lib.sh 
. ${opBinBase}/mmaLayer3Lib.sh

. ${opBinBase}/lpCurrents.libSh

setBasicItemsFiles lcaOpenVpnHostItems

opNetCfg_paramsGet ${opRunClusterName} ${opRunHostName}
# ${opNetCfg_ipAddr} ${opNetCfg_netmask} ${opNetCfg_networkAddr} ${opNetCfg_defaultRoute}

openvpnConfigFile="/etc/openvpn/lsipOvpn.conf"

# PRE parameters

function G_postParamHook {
    lpCurrentsGet
    
    secretStaticKeyFile=/opt/public/osmt/siteControl/nedaPlus/secretOpenVpn.key
    
    return 0
}


# ./mursL3Params.libSh 
. ${opBinBase}/mursL3Params.libSh

thisHostParams=$( ListFuncs | egrep "^${opRunHostName}Params$" )

if [ "${thisHostParams}_" == "_" ] ;   then
    EH_problem  "${G_myName} not supported on ${opRunHostName}"
    exit 1
else
    ${thisHostParams}
fi

netParam_intExtNets

typeset verboseLevel="verb 5"

DEBIAN_SCRIPT_DEBUG=9

function vis_examples {
  typeset extraInfo="-v -n showRun"
  #typeset extraInfo=""
  typeset doLibExamples=`doLibExamplesOutput ${G_myName}`
 cat  << _EOF_
EXAMPLES:
${doLibExamples}
--- INFORMATION ---
${G_myName} -s all -a summary
${G_myName} -s ${opRunHostName} -a describe
${G_myName} -s ${opRunHostName} -a serverType
--- SOFTWARE for Server Profile (update/verify/delete) ---
${G_myName} ${extraInfo} -s ${opRunHostName} -a serviceSoftwareProfile fullVerify
${G_myName} ${extraInfo} -s ${opRunHostName} -a serviceSoftwareProfile showCmdLine -a fullUpdate
--- FULL SERVER MANIPULATION ---
${G_myName} ${extraInfo} -s ${opRunHostName} -a fullReport
${G_myName} ${extraInfo} -s ${opRunHostName} -a fullVerify
${G_myName} ${extraInfo} -s ${opRunHostName} -a fullUpdate
${G_myName} ${extraInfo} -s ${opRunHostName} -a fullDelete
--- SERVER CONFIG  ---
${G_myName} ${extraInfo} -s ${opRunHostName} -a serverConfigStdout
${G_myName} ${extraInfo} -s ${opRunHostName} -a serverConfigUpdate
${G_myName} ${extraInfo} -s ${opRunHostName} -a serverConfigVerify
${G_myName} ${extraInfo} -s ${opRunHostName} -a serverConfigShow
--- DAEMON SERVICE ADMIN ---
${G_myName} ${extraInfo} -s ${opRunHostName} -a daemonEnable
${G_myName} ${extraInfo} -s ${opRunHostName} -a daemonDisable
${G_myName} ${extraInfo} -s ${opRunHostName} -a daemonStart
${G_myName} ${extraInfo} -s ${opRunHostName} -a daemonStop
${G_myName} ${extraInfo} -s ${opRunHostName} -a daemonShow
${G_myName} ${extraInfo} -s ${opRunHostName} -a daemonVerify
--- LOGS ---
${G_myName} ${extraInfo} -i showLog
grep ovpn /var/log/syslog
--- VERIFY The Interface/Link ---
mmaLayer3Admin.sh -i ipLinkList | grep -i tun1
ifconfig tun1
--- VERIFY Connectivity ---
ping 10.88.99.21
ping 10.88.99.11
ping 192.168.201.1
ping 192.168.201.2
_EOF_
}

vis_help () {
  cat  << _EOF_
Host: Supports both Client Side and Server Side

http://openvpn.net/index.php/documentation/howto.html
_EOF_
  return 0
}

noArgsHook() {
  vis_examples
}


firstSubjectHook() {
  case ${action} in
    "summary")
	       typeset -L20 f1="Host" f2="Setup"
	       print "$f1$f2"
	       echo "----------------------------------------------------"
       ;;
    *)
       return
       ;;
  esac
}

lastSubjectHook() {
  case ${action} in
    "summary")
	       echo "----------------------------------------------------"
       ;;
    *)
       return
       ;;
  esac
}

function do_summary {
  subjectValidatePrepare

  typeset -L15 v1=${iv_vpnHost_host}
  typeset -L30  v2=${iv_vpnHost_setup}

  print "${v1}${v2}"
}

function do_serverConfigStdout {
  subjectValidatePrepare

    case ${iv_vpnHost_setup} in
	"server")
	    openvpnConfigServerStdout
	    ;;
	"client")
	    openvpnConfigClientStdout
	    ;;
	*)
	    EH_problem "Unknown netRole: ${iv_vpnHost_setup}"
	    ;;
    esac

}

function openvpnConfigServerStdout {

  cat  << _EOF_
# ${openvpnConfigFile} -- configuration file for openvpn
# The following lines are generated by ${G_myName}:do_serverConfigStdout
# All manual modifications will be lost on the next LSIP run.

# Server Config File

local 198.62.92.192
dev tun1 
ifconfig ${localTunnelAddr} ${remoteTunnelAddr} 
route 192.168.201.0 255.255.255.0 ${remoteTunnelAddr}
secret ${secretStaticKeyFile}
ping 10
ping-restart 90
${verboseLevel} 
_EOF_
}

function openvpnConfigClientStdout {

  cat  << _EOF_
# ${openvpnConfigFile} -- configuration file for openvpn
# The following lines are generated by ${G_myName}:do_serverConfigStdout
# All manual modifications will be lost on the next LSIP run.

# Client Config File
#remote ${responderIpAddr}
remote 198.62.92.192
dev tun1
ifconfig ${localTunnelAddr} ${remoteTunnelAddr}
#redirect-gateway def1
secret ${secretStaticKeyFile}
ping 10
ping-restart 90
${verboseLevel}
_EOF_
}

function do_serverConfigUpdate {
  subjectValidatePrepare

    FN_fileSafeKeep ${openvpnConfigFile}

    do_serverConfigStdout > ${openvpnConfigFile}

    echo cat ${openvpnConfigFile}
}

function do_serverConfigVerify {
  subjectValidatePrepare

  typeset tmpFile=$( FN_tempFile )

  do_serverConfigStdout > ${tmpFile} 

  FN_fileCmpAndDiff ${openvpnConfigFile} ${tmpFile}
 
  FN_fileRmIfThere ${tmpFile} 
}


function do_serverType {
  targetSubject=item_${subject}

  subjectIsValid
  if [[ $? == 0 ]] ; then
    ${targetSubject}
    if [[ ${iv_imapSrvr_setup} == "" ]] ; then
      EH_problem ""
      return 1
    fi
    print "${iv_imapSrvr_setup}"
    return 0
  else
    print "noService"
    return 1
  fi
}


function do_fullVerify {
  targetSubject=item_${subject}

  subjectIsValid

  if [[ $? != 0 ]] ; then
    print -- "Skipped -- ${subject} is not configured."
    return 0
  fi
  
  if [[ "${subject}_" != "${opRunHostName}_" ]] ; then
    echo "Wrong Machine -- Re-run this script on ${subject}"
    return 1
  fi

  do_daemonVerify
}


function do_fullUpdate {
  targetSubject=item_${subject}

  subjectIsValid

  if [[ $? != 0 ]] ; then
    print -- "Skipped -- ${subject} is not configured."
    return 0
  fi
  
  if [[ "${subject}_" != "${opRunHostName}_" ]] ; then
    echo "Wrong Machine -- Re-run this script on ${subject}"
    return 1
  fi

  do_serverConfig

  do_daemonEnable
  do_daemonStart
  do_dnsUpdate
}


function do_fullDelete {
  targetSubject=item_${subject}

  subjectIsValid

  if [[ $? != 0 ]] ; then
    print -- "Skipped -- ${subject} is not configured."
    return 0
  fi
  
  if [[ "${subject}_" != "${opRunHostName}_" ]] ; then
    echo "Wrong Machine -- Re-run this script on ${subject}"
    return 1
  fi

  do_dnsDelete
  do_daemonStop
  do_daemonDisable
}



function do_daemonDisable {

  subjectValidatePrepare

  if [ -d /etc/openvpn ]  ; then
      opDo mv /etc/openvpn /etc/openvpn.disabled
  fi
}

function do_daemonEnable {

  subjectValidatePrepare

  if [ -d /etc/openvpn.disabled ]  ; then
      opDo mv /etc/openvpn.disabled /etc/openvpn 
  fi
}

function do_daemonStart {
    subjectValidatePrepare
    /etc/init.d/openvpn restart
  if [[ $? != 0 ]] ; then
    EH_problem "FAIL starting daemon"
  fi
}

function do_daemonStop {
  subjectValidatePrepare
  /etc/init.d/openvpn stop
  if [[ $? != 0 ]] ; then
    EH_problem "FAIL stopping daemon"
  fi
}

function do_daemonShow {

  subjectValidatePrepare
  #ps aux | grep openvpn
  pgrep openvpn || ANT_raw openvpn process not found
}


function do_daemonVerify {

  subjectValidatePrepare

# NOTYET, verify that the tunnel is in place

}

function vis_showLog {
    opDo grep ovpn /var/log/syslog.0
    opDo grep ovpn /var/log/syslog
}



function do_schemaVerify {
  targetSubject=item_${subject}
  subjectValidVerify
  ${targetSubject}
  print "NOTYET"
  exit 1
}


